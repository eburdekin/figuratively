// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())
  email String @unique
  password String
  refreshTokens RefreshToken[]
  sessions    Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @unique
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expireAt    DateTime
}

model Session {
  id           String     @id @unique @default(uuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  imageSubject   ImageSubject
  imageGender   ImageGender 
  imageClothing   ImageClothing
  imageCount   Int
  timePerImage Int
  startTime    DateTime
  endTime      DateTime?
  sessionNotes String?
  images       SessionImage[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Image {
  id          String     @id @unique @default(uuid())
  sessions    SessionImage[]
  imageSubject   ImageSubject
  imageGender   ImageGender 
  imageClothing   ImageClothing
  imageUrl    String @unique
  createdAt   DateTime   @default(now())
}

model SessionImage {
  sessionId String
  imageId   String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  image     Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([sessionId, imageId])
}

enum ImageSubject {
  FIGURE
  FACE
  HANDS
}

enum ImageGender {
  MALE
  FEMALE
}

enum ImageClothing {
  NUDE
  CLOTHED
}